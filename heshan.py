# -*- coding: utf-8 -*-
"""Heshan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Cz1yxoepeUfiW2n8CUal13CIcWuDhwe8
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Data Understanding
# Data Collection
# Assuming you have your data in a CSV file named 'tobacco_data.csv'
data = pd.read_csv('/content/death-rate-smoking new.csv')

# Data Exploration
print(data.head())
print(data.info())
print(data.describe())

# Load the CSV file into a DataFrame
data = pd.read_csv('/content/death-rate-smoking new.csv')

# Filter the DataFrame to include only records related to Sri Lanka
sri_lanka_data = data[data['Entity'] == 'Sri Lanka']


# Display the filtered DataFrame
print(sri_lanka_data.head())


# Now you can proceed with further preprocessing, analysis, or visualization tasks using this filtered data.

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Load the CSV file into a DataFrame
data = pd.read_csv('/content/death-rate-smoking new.csv')

# Filter the DataFrame to include only records related to Sri Lanka
sri_lanka_data = data[data['Entity'] == 'Sri Lanka']

# Remove non-numeric characters from the 'Smoking mortality' column
sri_lanka_data['Smoking mortality'] = sri_lanka_data['Smoking mortality'].str.replace('[^\d.]', '')

# Convert 'Smoking mortality' to float
sri_lanka_data['Smoking mortality'] = pd.to_numeric(sri_lanka_data['Smoking mortality'], errors='coerce')

# Drop rows with missing values in the 'Smoking mortality' column
sri_lanka_data.dropna(subset=['Smoking mortality'], inplace=True)

# Selecting relevant columns for prediction
X = sri_lanka_data[['Year']]
y = sri_lanka_data['Smoking mortality']

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model training
model = LinearRegression()
model.fit(X_train, y_train)

# Predictions
y_pred_train = model.predict(X_train)
y_pred_test = model.predict(X_test)

# Model evaluation
train_rmse = np.sqrt(mean_squared_error(y_train, y_pred_train))
test_rmse = np.sqrt(mean_squared_error(y_test, y_pred_test))

print("Train RMSE:", train_rmse)
print("Test RMSE:", test_rmse)

# Visualization
plt.figure(figsize=(10, 6))
plt.scatter(X_train, y_train, color='blue', label='Training Data')
plt.scatter(X_test, y_test, color='red', label='Testing Data')
plt.plot(X_train, y_pred_train, color='green', label='Regression Line')
plt.xlabel('Year')
plt.ylabel('Smoking mortality (per 100,000 people)')
plt.title('Linear Regression: Predicting Smoking Mortality in Sri Lanka')
plt.legend()
plt.show()

# Evaluation
# Results
print("Results:")
print("Train RMSE:", train_rmse)
print("Test RMSE:", test_rmse)

# Interpretation
print("\nInterpretation:")
if train_rmse < test_rmse:
    print("The model may be overfitting to the training data.")
elif train_rmse > test_rmse:
    print("The model may be underfitting or generalizing poorly to unseen data.")
else:
    print("The model appears to generalize well to unseen data.")

# Validation
print("\nValidation:")
# Assess if RMSE meets project objectives
# Compare with other models or benchmarks
# Analyze interpretability of coefficients
# Consider further steps for model improvement